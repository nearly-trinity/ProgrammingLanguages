-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Parser.y
-----------------------------------------------------------------------------

state 3 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> Statement Program                       (1)
	Program -> Statement                               (2)
	Statement -> Expr 'EOL'                            (3)
	Statement -> Expr 'ms' 'EOL'                       (4)
	Statement -> Expr                                  (5)
	Statement -> Expr 'ms'                             (6)
	Expr -> 'integer'                                  (7)
	Expr -> 'real'                                     (8)
	Expr -> 'fee'                                      (9)
	Expr -> 'pie'                                      (10)
	Expr -> 'phi'                                      (11)
	Expr -> 'mole'                                     (12)
	Expr -> Expr '+' Expr                              (13)
	Expr -> Expr '-' Expr                              (14)
	Expr -> Expr '*' Expr                              (15)
	Expr -> Expr '/' Expr                              (16)
	Expr -> Expr '^' Expr                              (17)
	Expr -> Expr '%' Expr                              (18)
	Expr -> '-' Expr                                   (19)
	Expr -> 'sqrt' Expr                                (20)
	Expr -> 'ifz' Expr 'then' Expr 'else' Expr         (21)
	Expr -> 'mr'                                       (22)
	Expr -> '(' Expr ')'                               (23)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'integer'      { IntTok $$ }
	'real'         { RealTok $$ }
	'+'            { AddTok }
	'-'            { SubTok }
	'*'            { MulTok }
	'/'            { DivTok }
	'^'            { PowTok }
	'sqrt'         { SqrtTok }
	'%'            { ModTok }
	'('            { LParenTok }
	')'            { RParenTok }
	'ifz'          { IfzTok }
	'then'         { ThenTok }
	'else'         { ElseTok }
	'ms'           { MsTok }
	'mr'           { MrTok }
	'EOL'          { EolTok }
	'fee'          { FeeTok }
	'pie'          { PieTok }
	'phi'          { PhiTok }
	'mole'         { MoleTok }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rules 1, 2
	Statement       rules 3, 4, 5, 6
	Expr            rules 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . Program                           (rule 0)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Program        goto state 15
	Statement      goto state 16
	Expr           goto state 3

State 1

	Program -> . Statement Program                      (rule 1)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Statement      goto state 2
	Expr           goto state 3

State 2

	Program -> Statement . Program                      (rule 1)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Program        goto state 17
	Statement      goto state 16
	Expr           goto state 3

State 3

	Statement -> Expr . 'EOL'                           (rule 3)
	Statement -> Expr . 'ms' 'EOL'                      (rule 4)
	Statement -> Expr .                                 (rule 5)
	Statement -> Expr . 'ms'                            (rule 6)
	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)

	'integer'      reduce using rule 5
	'real'         reduce using rule 5
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
			(reduce using rule 5)

	'*'            shift, and enter state 24
	'/'            shift, and enter state 25
	'^'            shift, and enter state 26
	'sqrt'         reduce using rule 5
	'%'            shift, and enter state 27
	'('            reduce using rule 5
	'ifz'          reduce using rule 5
	'ms'           shift, and enter state 28
	'mr'           reduce using rule 5
	'EOL'          shift, and enter state 29
	'fee'          reduce using rule 5
	'pie'          reduce using rule 5
	'phi'          reduce using rule 5
	'mole'         reduce using rule 5
	%eof           reduce using rule 5


State 4

	Expr -> 'integer' .                                 (rule 7)

	'integer'      reduce using rule 7
	'real'         reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	'^'            reduce using rule 7
	'sqrt'         reduce using rule 7
	'%'            reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'ifz'          reduce using rule 7
	'then'         reduce using rule 7
	'else'         reduce using rule 7
	'ms'           reduce using rule 7
	'mr'           reduce using rule 7
	'EOL'          reduce using rule 7
	'fee'          reduce using rule 7
	'pie'          reduce using rule 7
	'phi'          reduce using rule 7
	'mole'         reduce using rule 7
	%eof           reduce using rule 7


State 5

	Expr -> 'real' .                                    (rule 8)

	'integer'      reduce using rule 8
	'real'         reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	'^'            reduce using rule 8
	'sqrt'         reduce using rule 8
	'%'            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'ifz'          reduce using rule 8
	'then'         reduce using rule 8
	'else'         reduce using rule 8
	'ms'           reduce using rule 8
	'mr'           reduce using rule 8
	'EOL'          reduce using rule 8
	'fee'          reduce using rule 8
	'pie'          reduce using rule 8
	'phi'          reduce using rule 8
	'mole'         reduce using rule 8
	%eof           reduce using rule 8


State 6

	Expr -> '-' . Expr                                  (rule 19)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Expr           goto state 21

State 7

	Expr -> 'sqrt' . Expr                               (rule 20)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Expr           goto state 20

State 8

	Expr -> '(' . Expr ')'                              (rule 23)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Expr           goto state 19

State 9

	Expr -> 'ifz' . Expr 'then' Expr 'else' Expr        (rule 21)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Expr           goto state 18

State 10

	Expr -> 'mr' .                                      (rule 22)

	'integer'      reduce using rule 22
	'real'         reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'^'            reduce using rule 22
	'sqrt'         reduce using rule 22
	'%'            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'ifz'          reduce using rule 22
	'then'         reduce using rule 22
	'else'         reduce using rule 22
	'ms'           reduce using rule 22
	'mr'           reduce using rule 22
	'EOL'          reduce using rule 22
	'fee'          reduce using rule 22
	'pie'          reduce using rule 22
	'phi'          reduce using rule 22
	'mole'         reduce using rule 22
	%eof           reduce using rule 22


State 11

	Expr -> 'fee' .                                     (rule 9)

	'integer'      reduce using rule 9
	'real'         reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	'^'            reduce using rule 9
	'sqrt'         reduce using rule 9
	'%'            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'ifz'          reduce using rule 9
	'then'         reduce using rule 9
	'else'         reduce using rule 9
	'ms'           reduce using rule 9
	'mr'           reduce using rule 9
	'EOL'          reduce using rule 9
	'fee'          reduce using rule 9
	'pie'          reduce using rule 9
	'phi'          reduce using rule 9
	'mole'         reduce using rule 9
	%eof           reduce using rule 9


State 12

	Expr -> 'pie' .                                     (rule 10)

	'integer'      reduce using rule 10
	'real'         reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	'^'            reduce using rule 10
	'sqrt'         reduce using rule 10
	'%'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'ifz'          reduce using rule 10
	'then'         reduce using rule 10
	'else'         reduce using rule 10
	'ms'           reduce using rule 10
	'mr'           reduce using rule 10
	'EOL'          reduce using rule 10
	'fee'          reduce using rule 10
	'pie'          reduce using rule 10
	'phi'          reduce using rule 10
	'mole'         reduce using rule 10
	%eof           reduce using rule 10


State 13

	Expr -> 'phi' .                                     (rule 11)

	'integer'      reduce using rule 11
	'real'         reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	'^'            reduce using rule 11
	'sqrt'         reduce using rule 11
	'%'            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'ifz'          reduce using rule 11
	'then'         reduce using rule 11
	'else'         reduce using rule 11
	'ms'           reduce using rule 11
	'mr'           reduce using rule 11
	'EOL'          reduce using rule 11
	'fee'          reduce using rule 11
	'pie'          reduce using rule 11
	'phi'          reduce using rule 11
	'mole'         reduce using rule 11
	%eof           reduce using rule 11


State 14

	Expr -> 'mole' .                                    (rule 12)

	'integer'      reduce using rule 12
	'real'         reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	'^'            reduce using rule 12
	'sqrt'         reduce using rule 12
	'%'            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'ifz'          reduce using rule 12
	'then'         reduce using rule 12
	'else'         reduce using rule 12
	'ms'           reduce using rule 12
	'mr'           reduce using rule 12
	'EOL'          reduce using rule 12
	'fee'          reduce using rule 12
	'pie'          reduce using rule 12
	'phi'          reduce using rule 12
	'mole'         reduce using rule 12
	%eof           reduce using rule 12


State 15

	%start_parse -> Program .                           (rule 0)

	%eof           accept


State 16

	Program -> Statement . Program                      (rule 1)
	Program -> Statement .                              (rule 2)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14
	%eof           reduce using rule 2

	Program        goto state 17
	Statement      goto state 16
	Expr           goto state 3

State 17

	Program -> Statement Program .                      (rule 1)

	%eof           reduce using rule 1


State 18

	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)
	Expr -> 'ifz' Expr . 'then' Expr 'else' Expr        (rule 21)

	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	'/'            shift, and enter state 25
	'^'            shift, and enter state 26
	'%'            shift, and enter state 27
	'then'         shift, and enter state 38


State 19

	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)
	Expr -> '(' Expr . ')'                              (rule 23)

	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	'/'            shift, and enter state 25
	'^'            shift, and enter state 26
	'%'            shift, and enter state 27
	')'            shift, and enter state 37


State 20

	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)
	Expr -> 'sqrt' Expr .                               (rule 20)

	'integer'      reduce using rule 20
	'real'         reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'^'            reduce using rule 20
	'sqrt'         reduce using rule 20
	'%'            reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'ifz'          reduce using rule 20
	'then'         reduce using rule 20
	'else'         reduce using rule 20
	'ms'           reduce using rule 20
	'mr'           reduce using rule 20
	'EOL'          reduce using rule 20
	'fee'          reduce using rule 20
	'pie'          reduce using rule 20
	'phi'          reduce using rule 20
	'mole'         reduce using rule 20
	%eof           reduce using rule 20


State 21

	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)
	Expr -> '-' Expr .                                  (rule 19)

	'integer'      reduce using rule 19
	'real'         reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            shift, and enter state 24
	'/'            shift, and enter state 25
	'^'            shift, and enter state 26
	'sqrt'         reduce using rule 19
	'%'            shift, and enter state 27
	'('            reduce using rule 19
	')'            reduce using rule 19
	'ifz'          reduce using rule 19
	'then'         reduce using rule 19
	'else'         reduce using rule 19
	'ms'           reduce using rule 19
	'mr'           reduce using rule 19
	'EOL'          reduce using rule 19
	'fee'          reduce using rule 19
	'pie'          reduce using rule 19
	'phi'          reduce using rule 19
	'mole'         reduce using rule 19
	%eof           reduce using rule 19


State 22

	Expr -> Expr '+' . Expr                             (rule 13)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Expr           goto state 36

State 23

	Expr -> Expr '-' . Expr                             (rule 14)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Expr           goto state 35

State 24

	Expr -> Expr '*' . Expr                             (rule 15)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Expr           goto state 34

State 25

	Expr -> Expr '/' . Expr                             (rule 16)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Expr           goto state 33

State 26

	Expr -> Expr '^' . Expr                             (rule 17)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Expr           goto state 32

State 27

	Expr -> Expr '%' . Expr                             (rule 18)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Expr           goto state 31

State 28

	Statement -> Expr 'ms' . 'EOL'                      (rule 4)
	Statement -> Expr 'ms' .                            (rule 6)

	'integer'      reduce using rule 6
	'real'         reduce using rule 6
	'-'            reduce using rule 6
	'sqrt'         reduce using rule 6
	'('            reduce using rule 6
	'ifz'          reduce using rule 6
	'mr'           reduce using rule 6
	'EOL'          shift, and enter state 30
	'fee'          reduce using rule 6
	'pie'          reduce using rule 6
	'phi'          reduce using rule 6
	'mole'         reduce using rule 6
	%eof           reduce using rule 6


State 29

	Statement -> Expr 'EOL' .                           (rule 3)

	'integer'      reduce using rule 3
	'real'         reduce using rule 3
	'-'            reduce using rule 3
	'sqrt'         reduce using rule 3
	'('            reduce using rule 3
	'ifz'          reduce using rule 3
	'mr'           reduce using rule 3
	'fee'          reduce using rule 3
	'pie'          reduce using rule 3
	'phi'          reduce using rule 3
	'mole'         reduce using rule 3
	%eof           reduce using rule 3


State 30

	Statement -> Expr 'ms' 'EOL' .                      (rule 4)

	'integer'      reduce using rule 4
	'real'         reduce using rule 4
	'-'            reduce using rule 4
	'sqrt'         reduce using rule 4
	'('            reduce using rule 4
	'ifz'          reduce using rule 4
	'mr'           reduce using rule 4
	'fee'          reduce using rule 4
	'pie'          reduce using rule 4
	'phi'          reduce using rule 4
	'mole'         reduce using rule 4
	%eof           reduce using rule 4


State 31

	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)
	Expr -> Expr '%' Expr .                             (rule 18)

	'integer'      reduce using rule 18
	'real'         reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'^'            shift, and enter state 26
	'sqrt'         reduce using rule 18
	'%'            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'ifz'          reduce using rule 18
	'then'         reduce using rule 18
	'else'         reduce using rule 18
	'ms'           reduce using rule 18
	'mr'           reduce using rule 18
	'EOL'          reduce using rule 18
	'fee'          reduce using rule 18
	'pie'          reduce using rule 18
	'phi'          reduce using rule 18
	'mole'         reduce using rule 18
	%eof           reduce using rule 18


State 32

	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr '^' Expr .                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)

	'integer'      reduce using rule 17
	'real'         reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'^'            shift, and enter state 26
	'sqrt'         reduce using rule 17
	'%'            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'ifz'          reduce using rule 17
	'then'         reduce using rule 17
	'else'         reduce using rule 17
	'ms'           reduce using rule 17
	'mr'           reduce using rule 17
	'EOL'          reduce using rule 17
	'fee'          reduce using rule 17
	'pie'          reduce using rule 17
	'phi'          reduce using rule 17
	'mole'         reduce using rule 17
	%eof           reduce using rule 17


State 33

	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr '/' Expr .                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)

	'integer'      reduce using rule 16
	'real'         reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	'^'            shift, and enter state 26
	'sqrt'         reduce using rule 16
	'%'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'ifz'          reduce using rule 16
	'then'         reduce using rule 16
	'else'         reduce using rule 16
	'ms'           reduce using rule 16
	'mr'           reduce using rule 16
	'EOL'          reduce using rule 16
	'fee'          reduce using rule 16
	'pie'          reduce using rule 16
	'phi'          reduce using rule 16
	'mole'         reduce using rule 16
	%eof           reduce using rule 16


State 34

	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr '*' Expr .                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)

	'integer'      reduce using rule 15
	'real'         reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'^'            shift, and enter state 26
	'sqrt'         reduce using rule 15
	'%'            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'ifz'          reduce using rule 15
	'then'         reduce using rule 15
	'else'         reduce using rule 15
	'ms'           reduce using rule 15
	'mr'           reduce using rule 15
	'EOL'          reduce using rule 15
	'fee'          reduce using rule 15
	'pie'          reduce using rule 15
	'phi'          reduce using rule 15
	'mole'         reduce using rule 15
	%eof           reduce using rule 15


State 35

	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr '-' Expr .                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)

	'integer'      reduce using rule 14
	'real'         reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            shift, and enter state 24
	'/'            shift, and enter state 25
	'^'            shift, and enter state 26
	'sqrt'         reduce using rule 14
	'%'            shift, and enter state 27
	'('            reduce using rule 14
	')'            reduce using rule 14
	'ifz'          reduce using rule 14
	'then'         reduce using rule 14
	'else'         reduce using rule 14
	'ms'           reduce using rule 14
	'mr'           reduce using rule 14
	'EOL'          reduce using rule 14
	'fee'          reduce using rule 14
	'pie'          reduce using rule 14
	'phi'          reduce using rule 14
	'mole'         reduce using rule 14
	%eof           reduce using rule 14


State 36

	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr '+' Expr .                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)

	'integer'      reduce using rule 13
	'real'         reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            shift, and enter state 24
	'/'            shift, and enter state 25
	'^'            shift, and enter state 26
	'sqrt'         reduce using rule 13
	'%'            shift, and enter state 27
	'('            reduce using rule 13
	')'            reduce using rule 13
	'ifz'          reduce using rule 13
	'then'         reduce using rule 13
	'else'         reduce using rule 13
	'ms'           reduce using rule 13
	'mr'           reduce using rule 13
	'EOL'          reduce using rule 13
	'fee'          reduce using rule 13
	'pie'          reduce using rule 13
	'phi'          reduce using rule 13
	'mole'         reduce using rule 13
	%eof           reduce using rule 13


State 37

	Expr -> '(' Expr ')' .                              (rule 23)

	'integer'      reduce using rule 23
	'real'         reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'^'            reduce using rule 23
	'sqrt'         reduce using rule 23
	'%'            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'ifz'          reduce using rule 23
	'then'         reduce using rule 23
	'else'         reduce using rule 23
	'ms'           reduce using rule 23
	'mr'           reduce using rule 23
	'EOL'          reduce using rule 23
	'fee'          reduce using rule 23
	'pie'          reduce using rule 23
	'phi'          reduce using rule 23
	'mole'         reduce using rule 23
	%eof           reduce using rule 23


State 38

	Expr -> 'ifz' Expr 'then' . Expr 'else' Expr        (rule 21)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Expr           goto state 39

State 39

	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)
	Expr -> 'ifz' Expr 'then' Expr . 'else' Expr        (rule 21)

	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	'/'            shift, and enter state 25
	'^'            shift, and enter state 26
	'%'            shift, and enter state 27
	'else'         shift, and enter state 40


State 40

	Expr -> 'ifz' Expr 'then' Expr 'else' . Expr        (rule 21)

	'integer'      shift, and enter state 4
	'real'         shift, and enter state 5
	'-'            shift, and enter state 6
	'sqrt'         shift, and enter state 7
	'('            shift, and enter state 8
	'ifz'          shift, and enter state 9
	'mr'           shift, and enter state 10
	'fee'          shift, and enter state 11
	'pie'          shift, and enter state 12
	'phi'          shift, and enter state 13
	'mole'         shift, and enter state 14

	Expr           goto state 41

State 41

	Expr -> Expr . '+' Expr                             (rule 13)
	Expr -> Expr . '-' Expr                             (rule 14)
	Expr -> Expr . '*' Expr                             (rule 15)
	Expr -> Expr . '/' Expr                             (rule 16)
	Expr -> Expr . '^' Expr                             (rule 17)
	Expr -> Expr . '%' Expr                             (rule 18)
	Expr -> 'ifz' Expr 'then' Expr 'else' Expr .        (rule 21)

	'integer'      reduce using rule 21
	'real'         reduce using rule 21
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	'/'            shift, and enter state 25
	'^'            shift, and enter state 26
	'sqrt'         reduce using rule 21
	'%'            shift, and enter state 27
	'('            reduce using rule 21
	')'            reduce using rule 21
	'ifz'          reduce using rule 21
	'then'         reduce using rule 21
	'else'         reduce using rule 21
	'ms'           reduce using rule 21
	'mr'           reduce using rule 21
	'EOL'          reduce using rule 21
	'fee'          reduce using rule 21
	'pie'          reduce using rule 21
	'phi'          reduce using rule 21
	'mole'         reduce using rule 21
	%eof           reduce using rule 21


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 24
Number of terminals: 21
Number of non-terminals: 4
Number of states: 42
